#include <iostream>
#include <omp.h>
using namespace std;

void parallelBubbleSort(int * array, int n) {
  int i, j;
  #pragma omp parallel for private(i, j) shared(array)
  for (i = 0; i < n - 1; i++) {
    for (j = 0; j < n - i - 1; j++) {
      if (array[j] > array[j + 1]) {
        int temp = array[j];
        array[j] = array[j + 1];
        array[j + 1] = temp;
      }
    }
  }
}
int main() {
  int n;
  cout << "Enter array size: ";
  cin >> n;
  int * array = new int[n];
  for (int i = 0; i < n; i++) {
    cin>>array[i];
  }
  cout << "Array: ";
  for (int i = 0; i < n; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
  parallelBubbleSort(array, n);
  cout << "Sorted Array: ";
  for (int i = 0; i < n; i++) {
    cout << array[i] << " ";
  }
  return 0;
}
